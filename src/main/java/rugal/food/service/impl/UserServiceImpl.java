/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rugal.food.service.impl;

import java.util.Date;
import rugal.food.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import rugal.common.hibernate.Updater;
import rugal.common.page.Pagination;
import rugal.core.entity.Authentication;
import rugal.core.service.AuthenticationService;
import rugal.food.dao.UserDao;
import rugal.food.entity.User;

/**
 *
 * @author Rugal Bernstein
 */
@Service
public class UserServiceImpl implements UserService
{

    private static final int ONLINE_STATE = 1;

    private static final int OFFLINE_STATE = 0;

    @Autowired
    private UserDao userDao;

    @Autowired
    private AuthenticationService authenticationService;

    public void setAuthenticationService(AuthenticationService authenticationService)
    {
        this.authenticationService = authenticationService;
    }

    public void setUserDao(UserDao userDao)
    {
        this.userDao = userDao;
    }

    @Override
    public User save(User bean)
    {
        return userDao.save(bean);
    }

    @Override
    public User deleteById(String id)
    {
        return userDao.deleteById(id);
    }

    @Override
    public User findById(String id)
    {
        return userDao.findById(id);
    }

    @Override
    public Pagination getPage(int pageNo, int pageSize)
    {
        return userDao.getPage(pageNo, pageSize);
    }

    private User updateLoginTime(User bean)
    {
        bean.setLastLogin(new Date().getTime());
        Updater<User> updater = new Updater<User>(bean);
        return userDao.updateByUpdater(updater);
    }

    private User changeUserState(User bean, int state)
    {
        if (state != OFFLINE_STATE) {
            state = ONLINE_STATE;
        }
        bean.setOnline(state);
        Updater<User> updater = new Updater<User>(bean);
        return userDao.updateByUpdater(updater);

    }

    private User userOnline(User bean)
    {
        return changeUserState(bean, ONLINE_STATE);
    }

    private User userOffline(User bean)
    {
        return changeUserState(bean, OFFLINE_STATE);
    }

    /**
     *
     * @param authentication This parameter generated by struts framework,given by user to type in
     * username and password<BR/>
     * for safety consideration,deliberately use this bean as an authentication class
     * @return null if authencation fail; or return user object if success
     */
    @Override
    public User logon(Authentication authentication)
    {
        //check id&pwd
        if (authentication.isInvalide()) {
            User u = authenticationService.authenticate(authentication);//check if UCenter authencated
            if (null == u) {//if password or profile not authenticated
                return null;//feedback
            }
            User innerUser = userDao.findById(u.getUid());
            if (innerUser == null) {//check if this user exist in local database 
                innerUser = u;
                userDao.save(innerUser);//if not then add in 
            } else {
                updateLoginTime(innerUser);//if already exist,then update last login time
            }
            userOnline(innerUser);//update online state
            return innerUser;
        }
        return null;
    }

    @Override
    public void logout(User bean)
    {
        userOffline(bean);
    }
}
